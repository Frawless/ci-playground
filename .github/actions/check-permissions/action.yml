name: Verify users rights
description: "Fails the workflow run if the triggering user lacks write permission or is not in the given organisation team."

inputs:
  team:
    description: "Name of the team that contains trusted contributors"
    default: "contributors"
  fail_message:
    description: "Issue-comment body when the check fails"
    default: "⚠️ You don’t have permission to run this workflow. Please ask a maintainer to trigger it for you."

runs:
  using: composite
  steps:
    - name: Check repository permission / team membership
      uses: actions/github-script@v7
      with:
        script: |
          const core   = require('@actions/core');
          const {owner, repo} = context.repo;
          const actor  = process.env.GITHUB_ACTOR;
          const team   = core.getInput('team');
          const denial = core.getInput('fail_message');

          //------------------------------------------------------------------
          // 1) Must be an org member
          //------------------------------------------------------------------
          let orgMember = true;
          try {
            await github.rest.orgs.getMembershipForUser({org: owner, username: actor});
          } catch (_) { orgMember = false; }

          //------------------------------------------------------------------
          // 2) Either write-plus on repo OR membership in the trusted team
          //------------------------------------------------------------------
          let hasWrite = false;
          if (orgMember) {
            const perm = (await github.rest.repos.getCollaboratorPermissionLevel({
              owner, repo, username: actor
            })).data.permission;
            hasWrite = ['admin','maintain','write'].includes(perm);

            if (!hasWrite) {
              // look for team membership
              try {
                await github.rest.teams.getMembershipForUserInOrg({
                  org: owner, team_slug: team, username: actor
                });
                hasWrite = true;
              } catch (_) {/* not in team */}
            }
          }

          if (orgMember && hasWrite) {
            core.info(`${actor} authorised ✅`);
            return; // success
          }

          //------------------------------------------------------------------
          // 3) Post PR comment if applicable, then fail
          //------------------------------------------------------------------
          if (context.payload.pull_request || context.payload.issue?.pull_request) {
            const issueNumber = (context.payload.pull_request?.number)
                              ?? (context.payload.issue.number);
            await github.rest.issues.createComment({
              owner, repo,
              issue_number: issueNumber,
              body: denial
            });
            core.info(`Refusal comment posted to PR #${issueNumber}`);
          }

          core.setFailed(`${actor} is not authorised ❌`);
