name: Comment and Status
description: "Posts a comment on the pull-request and sets a commit status on the given (or auto-detected) SHA."

inputs:
  commentMessage:
    description: "Message that will be put as a comment"
    required: true
  checkState:
    description: "Check state: error, failure, pending, or success"
    default: success
  checkName:
    description: "Status-line “context” label (appears in the PR UI)"
    default: custom/check
  checkDescription:
    description: "Short description that shows next to the status"
    default: ''
  sha:
    description: "Commit SHA to attach the status to (auto-detected if empty)"
    required: false

runs:
  using: composite
  steps:
    - name: Add comment & set check
      id: comment-and-check
      uses: actions/github-script@v7
      env:
        MESSAGE: ${{ inputs.commentMessage }}
        CHECK_STATE: ${{ inputs.checkState }}
        CHECK_NAME: ${{ inputs.checkName }}
        CHECK_DESCRIPTION: ${{ inputs.checkDescription }}
        SHA: ${{ inputs.sha }}
      with:
        script: |
          const {owner, repo} = context.repo;

          const msg         = process.env.MESSAGE
          const checkState  = process.env.CHECK_STATE
          const checkName   = process.env.CHECK_NAME
          const desc      = process.env.CHECK_DESCRIPTION
          let   sha       = process.env.SHA
          let   prNumber  = undefined;

          //------------------------------------------------------------------
          // 1) Work out PR number & HEAD SHA
          //------------------------------------------------------------------
          if (context.payload.pull_request) {
            prNumber = context.payload.pull_request.number;
            sha    ||= context.payload.pull_request.head.sha;
          } else if (context.payload.issue?.pull_request) {
            prNumber = context.payload.issue.number;
            if (!sha) {
              const pr = await github.request(
                context.payload.issue.pull_request.url);
              sha = pr.data.head.sha;
            }
          } else {
            sha ||= context.sha;
          }

          //------------------------------------------------------------------
          // 2) Add / update PR comment
          //------------------------------------------------------------------
          if (prNumber) {
            await github.rest.issues.createComment({
              owner, repo, issue_number: prNumber, body: msg
            });
          }

          //------------------------------------------------------------------
          // 3) Map state → conclusion
          //------------------------------------------------------------------
          const conclusionToState = { 
            success: 'success', 
            failure: 'failure',
            pending: 'in_progress', 
            error:'neutral' 
          };
          const conclusion = conclusionToState[checkState] ?? 'neutral';

          //------------------------------------------------------------------
          // 4) Create NEW run if none is currently in progress
          //------------------------------------------------------------------
          const list = await github.rest.checks.listForRef({ owner, repo, ref: sha });

          let run = list.data.check_runs
                         .find(cr => cr.name === checkName && cr.status !== 'completed');

          if (!run) {
            run = (await github.rest.checks.create({
              owner, repo,
              name: checkName,
              head_sha: sha,
              status: 'in_progress'
            })).data;
          }

          //------------------------------------------------------------------
          // 5) Finish the run when we have a final state
          //------------------------------------------------------------------
          if (conclusion !== 'in_progress') {
            await github.rest.checks.update({
              owner, repo, check_run_id: run.id,
              status: 'completed',
              conclusion,
              output: {
                title: checkName,
                summary: desc || msg
              },
              details_url:
                `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}` +
                `/actions/runs/${process.env.GITHUB_RUN_ID}`
            });
          }