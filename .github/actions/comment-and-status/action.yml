name: Comment and Status
description: "Posts a comment on the pull-request and sets a commit status on the given (or auto-detected) SHA."

inputs:
  message:
    description: "Message that will be put as a comment"
    required: true
  state:
    description: "Commit-status state: error, failure, pending, or success"
    default: success
  context:
    description: "Status-line “context” label (appears in the PR UI)"
    default: custom/check
  statusDescription:
    description: "Short description that shows next to the status (optional)"
    default: ''
  sha:
    description: "Commit SHA to attach the status to (optional – auto-detected)"
    required: false

runs:
  using: composite
  steps:
    - name: Add comment & set status
      id: do-work
      uses: actions/github-script@v7
      with:
        # 👇 forward every composite input
        message: ${{ inputs.message }}
        state: ${{ inputs.state }}
        context: ${{ inputs.context }}
        statusDescription: ${{ inputs.statusDescription }}
        sha: ${{ inputs.sha }}

        script: |
          const {owner, repo} = context.repo;

          const msg        = core.getInput('message');
          const stateIn    = core.getInput('state');
          const statusCtx  = core.getInput('context');
          const statusDesc = core.getInput('statusDescription');
          let   commitSha  = core.getInput('sha') || '';
          let   prNumber    = undefined;

          // ---------- work out PR number & SHA ----------
          if (context.payload.pull_request) {
            prNumber  = context.payload.pull_request.number;
            commitSha = commitSha || context.payload.pull_request.head.sha;
          } else if (context.payload.issue?.pull_request) { // e.g. issue_comment event
            prNumber = context.payload.issue.number;
            if (!commitSha) {
              const pr = await github.request(context.payload.issue.pull_request.url);
              commitSha = pr.data.head.sha;
            }
          } else {                                          // push / workflow_dispatch, etc.
            commitSha = commitSha || context.sha;
          }

          // ---------- 1) create PR comment (if we have a PR) ----------
          if (prNumber) {
            await github.rest.issues.createComment({
              owner, repo,
              issue_number: prNumber,
              body: msg
            });
            core.info(`Comment posted to PR #${prNumber}`);
          } else {
            core.warning('No PR context – comment skipped');
          }

          // ------------------------------------------------------------
          // 2) Create or update a check-run
          // ------------------------------------------------------------
          try {
            // 2.1 create the run if it doesn't exist yet
            const runName = statusCtx;
            let runId;
        
            // try to find an existing check-run on this SHA with that name
            const checks = await github.rest.checks.listForRef({
              owner, repo, ref: commitSha
            });
            const existing = checks.data.check_runs.find(cr => cr.name === runName);
        
            if (existing) {
              runId = existing.id;
            } else {
              const created = await github.rest.checks.create({
                owner, repo,
                name: runName,
                head_sha: commitSha,
                status: 'in_progress'
              });
              runId = created.data.id;
            }
        
            // 2.2 finish the run with the desired conclusion
            const conclusion = { success:'success', failure:'failure', pending:'in_progress', error:'neutral' }[state] || 'neutral';
          
            await github.rest.checks.update({
              owner, repo, check_run_id: runId,
              status: conclusion === 'in_progress' ? 'in_progress' : 'completed',
              conclusion: conclusion === 'in_progress' ? undefined : conclusion,
              output: {
                title: runName,
                summary: statusDesc || msg || '(no details)'
              },
              details_url: `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`
            });
          } catch (e) {
            core.warning(`Could not create/update check-run: ${e.message}`);
          }