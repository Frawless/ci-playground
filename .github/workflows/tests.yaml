name: Unit & Integration tests

on:
  pull_request:
  push:
    branches:
      - "main"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker://rhysd/actionlint:latest
        with:
          args: -color

  integration:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        case:
          # ─── Scenario 1 ──────────────────────────────
          - id: pr-pipeline
            fixture: .github/tests/events/issue_comment_pipeline.json
            expect_pipelines: 'regression,upgrade'
            expect_profiles: ''
            workflow: .github/tests/workflows/parse-comment-template.yaml

          # ─── Scenario 2 ──────────────────────────────
          - id: issue-profile
            fixture: .github/tests/events/issue_comment_profile.json
            expect_pipelines: ''
            expect_profiles: 'operators,operands'
            workflow: .github/tests/workflows/parse-comment-template.yaml

          # ─── Scenario 3 ──────────────────────────────
          - id: dispatch
            fixture: .github/tests/events/dispatch_default.json
            expect_pipelines: ''
            expect_profiles: 'operators,operands,brokers-and-security,azp_kraft_upgrade,azp_kafka_upgrade'
            workflow: .github/tests/workflows/parse-comment-template.yaml
    steps:
      - uses: actions/checkout@v4

      - name: Pre-configure act
        run: |
          mkdir -p ~/.config/act
          echo "-P ubuntu-latest=catthehacker/ubuntu:act-latest" > ~/.config/act/actrc

      # Install `act` (one-liner script; runner already has Docker)
      - name: Install act
        run: |
          curl -s https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash
          sudo install -m 0755 ./bin/act /usr/local/bin/act

      # Run the template workflow with the current fixture
      - name: Smoke test – ${{ matrix.case.id }}
        # `act` itself is a plain shell command, so this step only needs `run:`
        run: |
          EXPECT_PIPELINES='${{ matrix.case.expect_pipelines }}' \
          EXPECT_PROFILES='${{ matrix.case.expect_profiles }}'   \
          act -W "${{ matrix.case.workflow }}"     \
              -e "${{ matrix.case.fixture }}"